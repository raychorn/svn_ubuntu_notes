a:3:{s:5:"child";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:3:"RDF";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:24:"http://purl.org/rss/1.0/";a:2:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:10:"
	
	
	

	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:25:"http://planet.python.org/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:24:"http://purl.org/rss/1.0/";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:13:"Planet Python";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:25:"http://planet.python.org/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:41:"Planet Python - http://planet.python.org/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"items";a:1:{i:0;a:6:{s:4:"data";s:5:"
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:3:"Seq";a:1:{i:0;a:6:{s:4:"data";s:103:"
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:2:"li";a:25:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:42:"http://del.icio.us/steve.holden#2009-03-31";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:76:"http://kayeva.wordpress.com/2009/03/21/scratching-my-own-documentation-itch/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:28:"http://www.dougma.com/?p=160";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:60:"http://blog.vrplumber.com/index.php?/archives/2301-guid.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:32:"http://blog.enthought.com/?p=109";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:5;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:38:"http://pyre.third-bit.com/blog/?p=2300";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:6;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:34:"tag:blog.isotoma.com,2009://2.2089";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:7;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:59:"tag:blogger.com,1999:blog-20144447.post-7511529311823937231";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:8;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:59:"tag:blogger.com,1999:blog-19730683.post-8403622826069898324";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:9;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:42:"http://baijum81.livejournal.com/28771.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:10;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:58:"http://orestis.gr/blog/2009/03/31/key-value-coding-pyobjc/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:11;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:70:"tag:blogger.com,1999:blog-1693831864832387340.post-4023205850290439268";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:12;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:70:"tag:blogger.com,1999:blog-2012718544703280651.post-7844351716046445964";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:13;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:34:"http://python.genedrift.org/?p=276";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:14;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:59:"tag:blogger.com,1999:blog-20144447.post-2653508241950466912";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:15;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:59:"tag:blogger.com,1999:blog-18669215.post-9015107625547366808";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:16;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:39:"http://www.microshare.net/weblog/?p=101";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:17;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:36:"http://www.protocolostomy.com/?p=512";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:18;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:58:"tag:blogger.com,1999:blog-3776799.post-5706631961098087017";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:19;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:60:"http://blog.vrplumber.com/index.php?/archives/2300-guid.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:20;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:38:"http://thomas.apestaart.org/log/?p=815";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:21;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:57:"tag:blogger.com,1999:blog-496482.post-5577207541982108299";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:22;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:60:"http://farmdev.com/thoughts/76/the-python-packaging-problem/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:23;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:81:"http://www.willmcgugan.com/blog/tech/2009/3/30/misleading-importerrors-in-django/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:24;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:8:"resource";s:39:"http://www.swordstyle.com/blog2/?p=1763";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}}}s:4:"item";a:25:{i:0;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:78:"http://feedproxy.google.com/~r/ForSomeValueOfMagic/~3/zxQ4BFZ86QI/steve.holden";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:48:"Steve Holden: Links for 2009-03-31 [del.icio.us]";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:78:"http://feedproxy.google.com/~r/ForSomeValueOfMagic/~3/zxQ4BFZ86QI/steve.holden";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:305:"<ul>
<li><a href="http://www.squidoo.com/become-a-really-good-graphic-designer">Become a really good graphic designer</a><br />
Nice piece from Seth Godin about how to be competent at graphics.</li>
</ul><img src="http://feeds2.feedburner.com/~r/ForSomeValueOfMagic/~4/zxQ4BFZ86QI" height="1" width="1" />";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-04-01T07:00:00+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:76:"http://kayeva.wordpress.com/2009/03/21/scratching-my-own-documentation-itch/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:49:"Kamon Ayeva: Scratching my own documentation itch";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:76:"http://kayeva.wordpress.com/2009/03/21/scratching-my-own-documentation-itch/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:305:"A week ago, I finished updating the Archetypes Developer Manual for Plone 3. In case you have not seen it, the new version is interesting for any developer who has to develop or update an Archetypes-based product ; it tries to present our current coding practices (GenericSetup, ZCA techniques...) The ...";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-04-01T05:42:55+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:34:"http://www.dougma.com/archives/160";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:34:"Dougma: PyCon 2009 Voting Raw Data";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:34:"http://www.dougma.com/archives/160";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:3108:"<p>This year we tried something new to get feedback from attendees this year. After a talk you would put little plastic bingo chips into one of three buckets to vote. We also have a talk interest system on the schedule where we get a count on what talks people are selecting. I captured the data just before and after the conference along with other metrics. All this data I have compiled into a <a href="https://spreadsheets.google.com/ccc?key=pwtoiXb_rI-Jzns9fTkfTTg" target="_blank">massive raw data dump</a> on google docs. It&#8217;s a firehose of information, you have been warned. Check the second and third sheets for details on the data. I would like to boil this data down into something useful. More on that below.</p>
<p><strong>History</strong></p>
<p>It was started by a suggestion by Bruce Eckle a few days before the conference. He mentioned a system from another conference where attendees could put slips of colored paper into a basket at the end of the talk to indicate what they thought (red=bad, yellow=ok, green=good). Yarko suggested using marbles, and then Ted and I ordered had found and ordered 108 tubs of colored bingo chips (clearing out the supply). It was at this point that Yarko pointed out that 3 colored buckets and a scale would be simpler, faster, and much, much easier. It is taking me longer to type this than it took for all that to happen&#8230; In retrospect we moved a bit too fast on the idea.</p>
<p><strong>Boiling it Down</strong></p>
<p>There are a number of issues with the data. There were two occurances of ballat stuffing which are marked with comments on the spreadsheet. Ignoring those, and some cancellations. The biggest issue is that people vote with their feet at PyCon. If you dont like a talk, you go to a different talk. The IRC channel is filled with people more than willing to inform you of how the other talks are going. Some celebrity speakers can draw people from other talks. There is open space and plenty of other things to do. The raw data includes talk interest calculated before and after the conference from the schedule app. These correlate (@ about 97%) with actual attendance. How that works out is a post by its self as there are finer grained details.</p>
<p>I am thinking of finding corrilations within the data and then using that to compute weights to be used against the voting counts. Then using that to discount the green votes by the attendance and yellow and red votes. The end result will be quite noisy and most of the talks will fall within the delta error. Many of the talks will fall above the delta error and we can use those for determining which speakers to give invited talks and to influence the program commitee decisions next year. This information would also be valuable in conjunction with the online and printes survey information (to come later) for speakers.</p>
<p>If someone would like to help me with this I would be ever grateful. I love working on stuff like this but we need to start working on the 2010 stuff yesturday (actually some people have been working on PyCon 2010 Atlanta for months).</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-04-01T05:00:15+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:90:"http://blog.vrplumber.com/index.php?/archives/2301-Almost-there,-just-testing-left....html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:52:"Mike C. Fletcher: Almost there, just testing left...";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:90:"http://blog.vrplumber.com/index.php?/archives/2301-Almost-there,-just-testing-left....html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:1253:"<br />
<p>PyOpenGL 3.0.0 is almost out the door.  Testing is done on Linux 64-bit and all seems well.  Documentation is updated (including deprecation warnings and updated PyDoc version).  Install of the library worked on a MacBook this afternoon, but the PyOpenGL-Demo module refused to download (some SourceForge issue with a redirect). Will have to try again tomorrow if I can find another friendly Mac user.  I'll need to boot into Vista to test on Win32 with extension support (already tested and passed on Win32 virtual machine (Qemu)).</p><p>I was intending to play around with a shadow-mapping demo today, but just didn't get to it.  Suppose I'll have to try tomorrow.  I've also been thinking about how to make OpenGLContext much faster.  One thing that comes up is that I could eliminate the whole scenegraph traversal (on a per-frame level) if I were to go with CPU-calculated matrices for everything (which has to happen anyway) and then reduce the rendering process to a loop over the set of cached render-objects (loop over the shapes getting the cached objects).  Anyway, probably won't get to that this week.</p><p>Oh, I also tested PyOpenGL on Python 2.6 on Linux 64-bit, all seemed to be working without any porting effort.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-04-01T04:36:57+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:32:"http://blog.enthought.com/?p=109";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:35:"Enthought: PyCon 2009 Prize Winners";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:32:"http://blog.enthought.com/?p=109";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:2936:"<p>Enthought had two prize drawings this year for people who visited our booth at PyCon in Chicago and dropped their contact information with us.  There were two jars to drop your name in.  One jar offered a free seat at one of our <a href="http://www.enthought.com/training">upcoming</a> Python training classes which demonstrates the power of using Python for scientific and technical computing.  </p>
<p>The other jar offered a lucky winner a one-year <a href="http://www.enthought.com/products/epd_silver.php">silver-level subscription</a> to our enterprise-class Python distribution for a group of up to 10 people.  This distribution allows the promise of write once, run everywhere to really work across your organization without the hassle of binary maintenance of all the packages needed for scientific computing with Python.</p>
<p>Yesterday at our all-hands meeting, Vibha Srinivasan (the lucky developer sitting near the front) drew the winners&#8217; names out of the jars.  And the winners are&#8230;drumroll please&#8230;</p>
<p>Eric Floehr of Intellovations, LLC is the official winner of the free Python training class.  He may select a class of his choice offered between now and the end of March 2010.  Eric is involved in weather prediction and forecasting and is looking forward to doing more with NumPy and SciPy.  Check out his sites: <a href="http://www.forecastwatch.com">http://www.forecastwatch.com</a> and <a href="http://forecastadvisor.com">http://www.forecastadvisor.com</a></p>
<p>If you are interested in taking one of Enthought&#8217;s Python training classes, you can look at the <a href="http://www.enthought.com/training">upcoming schedule</a> or <a href="http://www.enthought.com/contact">contact us</a> to have us come on-site and train your whole team.</p>
<p>Minah Worley from WorleyWorks is the fortunate winner of the silver-level subscription to EPD for her company.  Up to 10 people at her workplace will be able to enjoy all the benefits of silver-level subscription for a year (i.e. access to all the platforms we support, phone installation support, and update repository access).  Check out the <a href="http://worleyworks.com">WorleyWorks website</a> to see some impressive modern media projects.</p>
<p><a href="http://www.enthought.com/products/epd.php">Find out</a> more about supported, enterprise-class Python with enough power to solve your most pressing technical programming problems.  If you are interested in getting Python (with an entire suite of extra tools) working across multiple platforms to save you time and let you focus on getting your job done, <a href="http://www.enthought.com/contact">contact us</a>.</p>
<p>Congratulations to our winners and thank you to all who visited us at the Enthought booth at PyCon 2009 in Chicago.   We are looking forward to next year in Atlanta.</p>
<p>Warmly, </p>
<p>Enthought, Inc.<br />
515 Congress Ave<br />
Austin, TX 78701</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-04-01T02:56:27+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:49:"http://pyre.third-bit.com/blog/archives/2300.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:41:"Greg Wilson: Reassurance Cuddles for CEOs";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:49:"http://pyre.third-bit.com/blog/archives/2300.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:2988:"<p>Chris Anderson, editor-in-chief of <em>Wired</em> and author of <em>The Long Tail</em>, gave a talk at the MaRS Centre this morning to promote his new book about the economics of free stuff.  I was looking forward to hearing him speak: his resume includes stints at <em>The Economist</em>, <em>Nature</em>, <em>Science</em>, and Los Alamos National Laboratory, so he&#8217;s obviously a bright guy.</p>
<p>The talk was crap.  There&#8217;s no other way to say it.  It was superficial, derivative, and stumbling (OK, maybe there <em>are</em> other ways to say it).  None of what he said was original (I was going to say &#8220;particularly original&#8221;, but the qualifier isn&#8217;t needed), and he failed completely to back up any of his claims with anything that looked like evidence.</p>
<p>So why were people listening?  As we walked out, I remembered a book called <a href="http://www.amazon.com/Witch-Doctors-John-Micklethwait/dp/0812928334"><em>The Witch Doctors</em></a> by two other <em>Economist</em> alumni named John Micklethwait and Adrian Wooldridge.  That book is a critical look at the rise of management consulting gurus like Peter Drucker and Tom Peters; somewhere in it, the authors make the point that what people are usually paying for when they hire a high-priced management consultant is not answers, but certainty.  It&#8217;s the corporate equivalent of the reassurance cuddles I give my two-year-old: &#8220;Shh, shh, my little CEO, the world might be a big, scary place, but I&#8217;m going to send all the monsters packing so you can sleep safely tonight.&#8221;  The audience&#8212;mostly thirty-somethings and forty-somethings in suits&#8212;weren&#8217;t looking for subtlety or shades of gray.  They wanted to be told that the future still belonged to them, and like a good free marketeer, Anderson gave them exactly that.</p>
<p>Two things saved the talk from being a complete waste of time.  The first was bumping into the captain of my old Ultimate team, whom I hadn&#8217;t seen in four years.  The second was Anderson&#8217;s mention of the <a href="http://en.wikipedia.org/wiki/Freemium">freemium</a> business model, which reminded me that I wanted to say that I think it&#8217;s the future of higher education: lectures and course materials will be free, while students will pay per use for tutoring and access to labs, performance spaces, and the like.  A handful of universities will earn their keep by being recognized for honestly administering meaningful examinations (my money&#8217;s on the <a href="http://www.open.ac.uk/">Open University</a>, by the way, rather than traditional bricks-and-mortar institutions); the rest will become research institutions, winter camps for middle class teens and tweens, or fail.</p>
<p>But that subject deserves both more thought and a longer post.  Right now, I&#8217;m going to go read my actual two-year-old a goodnight story.  Any CEOs who are reading will just have to wait their turn&#8230;</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-04-01T01:57:22+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:67:"http://blog.isotoma.com/2009/03/bbc_radio_4_redesign_some_thou.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:44:"Isotoma: BBC Radio 4 redesign: some thoughts";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:67:"http://blog.isotoma.com/2009/03/bbc_radio_4_redesign_some_thou.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:4559:"<p>So, I <a href="http://twitter.com/fjordaan/status/1424205507">mentioned on Twitter</a> that I am disappointed in the redesign. Don&#8217;t get me wrong, it looks attractive and contemporary, and I&#8217;m by no means nostalgic for the old site (it was terrible). But the redesign didn&#8217;t do the things that I hoped it would, and also does several things that I don&#8217;t agree with.</p>

<p>My usage of the Radio 4 website (almost daily) is like this: when I&#8217;m stuck in one place, like washing dishes or ironing, I go to the website and try to find, as quickly as possible, something interesting to listen to. I&#8217;m not really loyal to any programmes in particular. I am aware that there are wonderful treasures buried in the site, but it&#8217;s usually a waste of time to click around. So I usually scan the homepage, especially Choice of the Day. Often I can&#8217;t find something that seems interesting, and I listen to the latest news broadcast. (I also have a similar use case when looking for podcasts to load onto my mp3 player.)</p>

<p><strong>I was hoping for 2 things from the redesign:</strong></p>

<ol><li>Many more recommendations on the homepage than before</li>
<li>Generally better discovery features</li></ol>

        <p>From what I&#8217;ve read, and <a href="http://twitter.com/djones655321">DG Jones</a> assures me, the tag system will help a lot with point 2, e.g. to power &#8220;More like this&#8221; and to surface older material. That sounds promising.</p>

<p><strong>My main problem currently is with point 1: the homepage.</strong> Despite the huge increase in screen real estate, it offers no more recommendations than before. I was hoping for a &#8220;Choice of the Day&#8221; of at least twice as many items, drawn from all programmes available on iPlayer, not just that day&#8217;s. Moreover, I was hoping for cleverer ways of recommendation. Editorial recommendations and &#8220;most popular&#8221; should be augmented by social recommendations &#8212; what people are listening to now, what people are bookmarking, what people are commenting on, what else those people listen to. Something like Radio Pop perhaps, but it can use anonymous data. </p>

<p><strong>I want to be overwhelmed and surprised by listening choices, from recently-broadcast to ancient, without first having to decide what subject or genre I&#8217;m interested in.</strong></p>

<p>The enormous old Listen Again page is close to what I&#8217;d like, but it completely failed because it lacked teaser descriptions, offered only A-Z grouping, and gave no sense of which things are most interesting or popular.</p>

<p>I&#8217;m a little skeptical about your system to find similar programmes to the current one. &#8220;More like this&#8221; requires you to click on genres and formats (and on some, subjects), but this is not nearly as likely to yield discoveries as a listing of programme names.</p>

<p>The most noticeable addition on the new design is thumbnail pictures for everything. I&#8217;m a designer myself and know their value in helping the eye scan the page (and make it prettier), but I would gladly have forgone them in favour of more text-based content. (More links, more teaser descriptions.) They add absolutely nothing, content-wise. In an elementary interaction design error, they&#8217;re often not even clickable. (I hope this is a teething problem that&#8217;ll soon be fixed.) The central carousel is not an appropriate navigation widget for this content; it makes it less scannable and is wasteful of space.</p>

<p>Other minor errors are:</p>

<ul><li>Radio 4 logo not linked to homepage</li>
<li>Link areas extend into whitespace on some pages (e.g. <a href="http://www.bbc.co.uk/radio4/programmes/genres/factual">this one</a>) due to block-level links</li>
<li>Layout problems on <a href="http://www.bbc.co.uk/radio4/programmes/genres/factual/player">this page</a></li></ul>

<p>Don&#8217;t take my response as wholly negative. I decided to focus in this post on the things that disappointed me. The site is an improvement in many respects. Especially at the programme level things are better. (Integration with the broader Programmes system was necessary and helpful.)</p>

<p>I do not know how typical I am of Radio 4 website users, but I hope the Radio 4 web team takes these comments to heart in the site&#8217;s continuing evolution.</p>

<p><em>The above was also posted on the <a href="http://www.bbc.co.uk/blogs/radio4/2009/03/the_new_radio_4_web_site.html#P77961515">Radio 4 blog</a></em></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T23:42:34+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:91:"http://feedproxy.google.com/~r/CoderWhoSaysPy/~3/HIySHbmS5cI/guido-has-retired-as-bdfl.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:39:"Brett Cannon: Guido has retired as BDFL";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:91:"http://feedproxy.google.com/~r/CoderWhoSaysPy/~3/HIySHbmS5cI/guido-has-retired-as-bdfl.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:1220:"<a href="http://www.python.org/dev/peps/pep-0401/">PEP 401</a> says it all: Guido has retired. If you attended PyCon you heard Guido's keynote where he mentioned he was tired but not retiring. Well, "tired" turned to "retired" rather quickly once the sprints started.<br /><br />To replace him as BDFL is Barry Warsaw, Friendly Language Uncle For Life (FLUFL). Read the PEP for details, but the things on the FLUFL's agenda is:<br /><br /><ul><li>Switch to bzr over hg.</li><li>Move to '<li>' over '!='.</li><li>Back to 'print' as a statement.</li><li>Shut down 3.x and backport everything to 2.7.</li><li>Move over to Parrot as the VM for Python.</li><li>Disband the PSF.</li></li></ul>To help with the transition I have implemented a new future statement to make the diamond operator -- '<li>' -- the one true way to write NOTEQUAL over '!=':<br /><br /><br /><code>from __future__ import barry_as_FLUFL</code><br /><br />This has been checked into Python 3.1.<div class="blogger-post-footer"><img width="1" height="1" src="http://res1.blogblog.com/tracker/20144447-7511529311823937231?l=sayspy.blogspot.com" /></div><img src="http://feeds2.feedburner.com/~r/CoderWhoSaysPy/~4/HIySHbmS5cI" height="1" width="1" /></li>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T23:11:13+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:70:"http://jeremyhylton.blogspot.com/2009/03/python-strings-and-bytes.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:39:"Jeremy Hylton: Python strings and bytes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:70:"http://jeremyhylton.blogspot.com/2009/03/python-strings-and-bytes.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:3589:"At the <a href="http://us.pycon.org/2009/sprints/projects/python-core/">PyCon sprints</a>, we looked into a lot of bugs in the standard library caused by interactions between strings and bytes.&nbsp; (A string holds a sequence of characters.&nbsp; A bytes object holds a sequence of bytes, e.g. 0-255.)&nbsp; I help maintain <a href="http://docs.python.org/3.0/library/http.client.html">httplib</a> and <a href="http://docs.python.org/3.0/library/urllib.request.html">urllib</a>, which read raw bytes from a socket and often convert them into strings.&nbsp; The details of those conversions are sometimes tricky.&nbsp; The<a href="http://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit"> rules for strings and bytes changed drastically in Python 3.0</a>.&nbsp; Most of the standard library was converted from old to new automatically (by <a href="http://docs.python.org/library/2to3.html">2to3</a>), and many of the times those conversions were incorrect.<br />
<br />
A harmless example comes from httplib where an if / elif statement had tests from strings and for unicode strings.&nbsp; They were both converted to test for strings by the conversion tool.&nbsp; The code looked like this:<br />
<span><br />
&nbsp;&nbsp;&nbsp; if isinstance(buf, str):&nbsp; # regular strings<br />
</span><br />
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # do something</div><div>&nbsp;&nbsp;&nbsp; elif isinstance(buf, str):&nbsp; # unicode strings</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # do something else</div><br />
In this case, the second branch could be deleted.&nbsp; In other cases, the effects were harmful.&nbsp; If you passed a bytes object as the body argument in an HTTP request--passing form params for a POST reply is a common case--the bytes object would be converted via str() to a string.<br />
<br />
&nbsp;&nbsp;&nbsp; &gt;&gt;&gt; body = b"key=value"<br />
&nbsp;&nbsp;&nbsp; &gt;&gt;&gt; str(body)<br />
&nbsp;&nbsp;&nbsp; "b'key=value'"<br />
<br />
That is, str() uses repr() to convert bytes to a string.&nbsp; That's simplfy incorrect.<br />
<br />
It will take a long time to sort out all of these problems.&nbsp; We don't have a lot of experience from application developers who are using Python 3.0, so we have to invent solutions as we go along.&nbsp; We're likely to make mistakes or at least make sub-optimal API decisions.<br />
<br />
I can of think of two things that would help us make progress.&nbsp; <br />
<br />
First, we ought to organize a systematic effort to review the standard library.&nbsp; How many of the libraries have plausible tests that exercise strings and bytes?&nbsp; For example, the json library was carefully tested with strings and unicode in Python 2.x.&nbsp; Those have all been converted to strings, so now we have a thorough set of tests for strings and none at all for bytes.<br />
<br />
Second, we need to collect a set of best practices for writing libraries that support bytes and unicode.&nbsp; A typical pattern is that bytes get sent on the wire.&nbsp; (Wires, almost by definition, send bytes.)&nbsp; The applications that use the wire usually want to deal with strings, which means they need to have some way to specify an encoding to use when send to or read from the wire.&nbsp; We could start by collecting all the patches and bug fixes that have gone into Python 3.1 to fix string and bytes problems with 3.0.<div class="blogger-post-footer"><img width="1" height="1" src="http://res1.blogblog.com/tracker/19730683-8403622826069898324?l=jeremyhylton.blogspot.com" /></div>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T23:04:38+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:42:"http://baijum81.livejournal.com/28771.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:68:"Baiju M.: To the entire Python community: www.buildout.org is ready!";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:42:"http://baijum81.livejournal.com/28771.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:373:"Check it out here: <a href="http://www.buildout.org">http://www.buildout.org</a><br /><br />Thanks to Jim Fulton for developing this great tool.<br /><br />Thanks to all <a href="http://www.buildout.org/thanks.html">contributors to the site</a>.<br /><br />Please send your <a href="http://baijum81.livejournal.com/28771.html?mode=reply">suggestions and comments to me</a>.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T19:57:35+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:10;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:58:"http://orestis.gr/blog/2009/03/31/key-value-coding-pyobjc/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:42:"Orestis Markou: Key-Value Coding in PyObjC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:58:"http://orestis.gr/blog/2009/03/31/key-value-coding-pyobjc/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:1083:"<p>Key Value Coding or KVC is a very important part of Cocoa. Accessing these properties can be a kludge though - you have to use <code>setValue_forKey_(value, key)</code> and <code>valueForKey_(key)</code> which is quite verbose. Luckily, PyObjC has a nice shortcut: a single underscore.
</p>
<pre><code>from Quartz import CALayer 
# CALayer accepts arbitrary properties, perfect for testing!
l = CALayer.layer()
l.setValue_forKey_('value1', 'key1')
v = l.valueForKey_('key1')
assert v == 'value1'

l._.key1 = 'value2'
v = l._.key1
assert v == 'value2'
v2 = l.valueForKey_('key1')
assert v2 == 'value2'
</code></pre><p>This is not very discoverable so I thought I'd put it up here in case anyone is wondering if there's a shortcut for key-value coding in PyObjC.
</p>
<p>Note: CALayer accepts arbitrary properties but I've found that things like bounds, frame and position work best if you use directly setBounds_, setFrame_ and setPosition_. I haven't looked deeply into it though.
</p>




<a href="http://orestis.gr/blog/2009/03/31/key-value-coding-pyobjc/#comments">Comments</a>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T18:59:47+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:11;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:78:"http://pythonide.blogspot.com/2009/03/resumable-ipython-inside-blender_31.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:53:"SPE Weblog: Resumable IPython inside Blender Terminal";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:78:"http://pythonide.blogspot.com/2009/03/resumable-ipython-inside-blender_31.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:7324:"Would it not be nice if <a href="http://ipython.scipy.org/">IPython</a> could run inside the <a href="http://www.blender.org/">Blender</a> terminal in such way that it will remember the namespace history in between sessions? Why IPython? It gives you auto completion, deep reloads, object introspection, input history, access to your operating system commands with python variables, auto indent, ... In case you are not convinced, read this <a href="http://ipython.scipy.org/doc/manual/html/interactive/tutorial.html">tutorial</a>, <a href="http://ipython.scipy.org/doc/manual/html/interactive/reference.html">reference</a> or watch these <a href="http://showmedo.com/videos/ipython">screencasts</a> on <a href="http://showmedo.com/">showmedo</a>.<br /><br />Most Linux distributions ship IPython in their repositories. For example installing on <a href="http://www.ubuntu.com/">Ubuntu</a> is as easy as:<blockquote><pre>$ sudo apt-get install ipython</pre></blockquote>Getting IPython on Windows or Mac is simple if you have <a href="http://pypi.python.org/pypi/setuptools">setuptools</a> installed:<blockquote><pre>$ easy_install IPython</pre></blockquote>Windows users should install <a href="http://ipython.scipy.org/dist/">pyreadline</a> as well for autocompletion. Check first in a terminal if IPython is correctly installed:<blockquote><pre>$ ipython<br />Python 2.5.2 (r252:60911, Oct  5 2008, 19:24:49)<br />Type "copyright", "credits" or "license" for more information.<br /><br />IPython 0.8.4 -- An enhanced Interactive Python.<br />?         -> Introduction and overview of IPython's features.<br />%quickref -> Quick reference.<br />help      -> Python's own help system.<br />object?   -> Details about 'object'. ?object also works, ?? prints more.<br /><br />In [1]:<br /></pre></blockquote>Save the following code as 'ipython_terminal.py' in your blender home script folder (~/.blender/scripts).<blockquote><pre>#!BPY<br /><br />"""<br />Name: 'IPython (Terminal) - Enhanced Interactive Python Shell in Terminal'<br />Blender: 248<br />Group: 'System'<br />Tooltip: 'Interactive Python Console in terminal'<br />"""<br /><br />__author__ = "Stani (SPE Python IDE)"<br />__url__ = ["pythonide.stani.be", "www.blender.org", "www.python.org"]<br />__bpydoc__ = """\<br />This only works if you started Blender from a terminal.<br />Otherwise Blender will freeze. The IPython console will<br />appear in the terminal. The namespace will be persistent<br />between console sessions within one Blender session.<br /><br />Press Ctrl-D to pause the IPython session and return to Blender.<br />"""<br /><br /># -*- coding: UTF-8 -*-<br /><br /># ar - ARchitecture library<br /># Copyright (C) 2009  www.stani.be<br />#<br /># This program is free software: you can redistribute it and/or modify<br /># it under the terms of the GNU General Public License as published by<br /># the Free Software Foundation, either version 3 of the License, or<br /># (at your option) any later version.<br />#<br /># This program is distributed in the hope that it will be useful,<br /># but WITHOUT ANY WARRANTY; without even the implied warranty of<br /># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br /># GNU General Public License for more details.<br />#<br /># You should have received a copy of the GNU General Public License<br /># along with this program.  If not, see http://www.gnu.org/licenses/<br /><br />import sys<br /><br />from IPython.Shell import IPShell<br /><br />import bpy<br />import Blender<br /><br />try:<br /> shell   = Blender.Registry.GetKey('ipython.terminal')['shell']<br /> shell.IP.exit_now   = False # resume<br />except TypeError:<br /> sys_argv    = sys.argv<br /> sys.argv    = ['/usr/bin/ipython']<br /> shell       = IPShell(user_ns={'Blender':Blender, 'bpy':bpy})<br /> sys.argv    = sys_argv<br /> def pre_prompt_hook(ip, Blender=Blender, shell=shell):<br />     Blender.Redraw()<br />     Blender.Registry.SetKey('ipython.terminal', {'shell':shell})<br /> shell.IP.set_hook('pre_prompt_hook',pre_prompt_hook)<br /><br />shell.mainloop(banner=shell.IP.BANNER + shell.IP.banner2 +\<br /> '\nPress Ctrl-D to pause the IPython session and ' +\<br /> 'return to Blender.\n')<br /><br /></pre></blockquote>Make sure you start Blender from a terminal and not from the start menu, as IPython will run in the terminal. You can start the IPython terminal from the Script window in Blender. (Scripts > System > Ipython (Terminal) ) Just like in my previous blog post, each time a Python statement is entered, the Blender window is updated. So you can move a cube and see the result, if you type:<blockquote><pre>In [1]: cube = bpy.data.objects['Cube']<br /><br />In [2]: cube.LocX = -1</pre></blockquote>When you want to return to Blender, press Ctrl-D. If you restart later the IPython terminal, it will remember any commands you have typed or any variables you have declared (like cube in the example).<br /><br />IPython has a different prompt which makes it easy to go back to previous input statements or output values: <blockquote><pre>In [1]: a=1<br /><br />In [2]: print a<br />1<br /><br />In [3]: a<br />Out[3]: 1<br /><br />In [4]: exec _i2 # execute second command<br />1<br /><br />In [5]: exec In[2:4] # execute multiple previous commands<br />1<br /><br />In [6]: b=_3 # third ouput value<br /><br />In [7]: a==b<br />Out[7]: True</pre></blockquote>If you prefer a standard python prompt (&gt;&gt;&gt;), just enter '%doctest_mode':<blockquote><pre>In [1]: %doctest_mode<br />*** Pasting of code with "&gt;&gt;&gt;" or "..." has been enabled.<br />Exception reporting mode: Plain<br />Doctest mode is: ON<br /><br />&gt;&gt;&gt;<br /></pre></blockquote>For auto completion, press the TAB key: <blockquote><pre>In [1]: bpy.data.<br />bpy.data.__class__         bpy.data.curves<br />bpy.data.__delattr__       bpy.data.fonts<br />bpy.data.__dict__          bpy.data.groups<br />bpy.data.__doc__           bpy.data.images<br />bpy.data.__getattribute__  bpy.data.ipos<br />bpy.data.__hash__          bpy.data.lamps<br />bpy.data.__init__          bpy.data.lattices<br />bpy.data.__name__          bpy.data.materials<br />bpy.data.__new__           bpy.data.meshes<br />bpy.data.__reduce__        bpy.data.metaballs<br />bpy.data.__reduce_ex__     bpy.data.objects<br />bpy.data.__repr__          bpy.data.scenes<br />bpy.data.__setattr__       bpy.data.sounds<br />bpy.data.__str__           bpy.data.texts<br />bpy.data.actions           bpy.data.textures<br />bpy.data.armatures         bpy.data.worlds<br />bpy.data.cameras        <br /><br />In [1]: bpy.data.m<br />bpy.data.materials  bpy.data.meshes     bpy.data.metaballs<br /><br />In [1]: from Blender import M<br />Material   Mathutils  Mesh       Metaball   Modifier </pre></blockquote>As shown in the last example auto completion works even for import statements.<br /><br />Altough the Blender window updates itself, the Blender user interface is still irresponsive when running an IPython session. In a future blog post I'll show how to run IPython inside the Blender window in such way that the user interface stays fully responsive.<div class="blogger-post-footer"><img width="1" height="1" src="http://res1.blogblog.com/tracker/1693831864832387340-4023205850290439268?l=pythonide.blogspot.com" /></div>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T19:22:50+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:12;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:74:"http://python-groups.blogspot.com/2009/03/tuple-tucson-az-march-recap.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:52:"Python User Groups: TuPLE (Tucson, AZ) - March recap";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:74:"http://python-groups.blogspot.com/2009/03/tuple-tucson-az-march-recap.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:1328:"<div>There seems to be a good bit of interest in Python in the Tucson area, with new attendees from the UofA and several local companies who use Python for their daily work.</div><div><br /></div>Ben Reynwar gave us an intro to Django, including basic project setup and routing urls to python methods.<div><br />Lucas Taylor introduced the Twisted framework and basic concepts including the Reactor, Deferreds, and Protocols. Demo code was shown to illustrate the basics of a simple server implementation.<br /><br /></div><div>Dave Thompson gave his Flash &amp; Python talk. Included an overview of what Flash and Flex are, the AMF (Adobe Messaging Format), and python tools used for parsing and encoding objects in AMF. Discussed <a href="http://pyamf.org/">pyAMF</a> and his own new library <a href="http://code.google.com/p/amfast/">AmFast</a>.  AmFast is an AMF3 encoder/decoder implemented for speed. Initial tests show an 18x increase in speed for the encode/decode operations.   <a href="http://ccp.arl.arizona.edu/dthompso/flash_python.pdf">Slides</a> available on the <a href="http://limscoder.blogspot.com/">limscoder blog</a><br /></div><div class="blogger-post-footer"><img width="1" height="1" src="http://res1.blogblog.com/tracker/2012718544703280651-7844351716046445964?l=python-groups.blogspot.com" /></div>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T18:52:11+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:13;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:79:"http://feedproxy.google.com/~r/BeginningPythonForBioinformatics/~3/SteRPKO_Rec/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:74:"Paulo Nuin: Managing a simple database with Python, SQLite and wxPython, 6";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:79:"http://feedproxy.google.com/~r/BeginningPythonForBioinformatics/~3/SteRPKO_Rec/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:9387:"<div class="zemanta-img">
<div>
<dl class="wp-caption alignright">
<dt class="wp-caption-dt"><a href="http://commons.wikipedia.org/wiki/Image:SQLite_Logo_4.png"><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/19/SQLite_Logo_4.png/202px-SQLite_Logo_4.png" alt="The :en:SQLite logo as of 2007-12-15" title="The :en:SQLite logo as of 2007-12-15" height="60" width="202" /></a></dt>
<dd class="wp-caption-dd zemanta-img-attribution">Image via <a href="http://commons.wikipedia.org/wiki/Image:SQLite_Logo_4.png">Wikipedia</a></dd>
</dl>
</div>
</div>
<p>Let&#8217;s get back to our SQLite and wxPython project. We haven&#8217;t seen anything on wxPython yet, and we will check the interface only on the next post. For now, let&#8217;s see some extra code added to the SQLite access class. Remember that we have a generic class and one class derived from it that would work on accessing specific tables in our database file.</p>
<p>When we last covered the db access routines, there was no search for an entry (the function returned everything in the table no matter what), there was no update function in case someone would want to modify an entry and there was no delete method if you wanted to delete something. In the meantime, I added all of this functionality (and some other) to the generic class and extended it to the class derived from it. Let&#8217;s check how the generic class is now (you will notice that there is an issue in one of the methods, if someone can help me I&#8217;d appreciate. More details later.)</p>
<pre name="code" class="python">
class DB_Generic():
    &#039;&#039;&#039;generic class to add DB functionality&#039;&#039;&#039;
    def __init__(self, table_name, db_path = &#039;&#039;):
        #par= name of the table to be used
        self.table_name = table_name
        if len(db_path) &amp;gt; 0:
            self.db_path = db_path
            print db_path

    def get_data_generic(self, range = 1, bac_to_get = 0):
        &#039;&#039;&#039;gets the data from the database&#039;&#039;&#039;       

        if sys.platform == &#039;darwin&#039;:
            (cursor, database) = link_db(self.db_path)
        else:
            (cursor, database) = link_db()

        if range == 1:
            cursor.execute(&quot;&quot;&quot;SELECT * FROM %s&quot;&quot;&quot; % self.table_name)
        elif range == 2:
            cursor.execute(&quot;&quot;&quot;SELECT * FROM %s where idbac = %d&quot;&quot;&quot; % (self.table_name, bac_to_get))

        table_data = cursor.fetchall()
        raw_data = []
        for i in table_data:
            raw_data.append(list(i))

        self.table_data = raw_data
        database.close()

    def insert_data(self, values_list, insert_string):
        &#039;&#039;&#039;inserts data in the database&#039;&#039;&#039;

        if sys.platform == &#039;darwin&#039;:
            (cursor, database) = link_db(self.db_path)
        else:
            (cursor, database) = link_db()

        cursor.execute(insert_string % self.table_name, values_list)

        database.commit()
        database.close()

    def update_data(self, values_list):
        &#039;&#039;&#039;edits and updates fields&#039;&#039;&#039;

        if sys.platform == &#039;darwin&#039;:
            (cursor, database) = link_db(self.db_path)
        else:
            (cursor, database) = link_db()

        #change this to generic!!!!!!!!!!!!
        cursor.execute(&quot;UPDATE bac SET  projects = ?, comments = ?, temperature = ?, cell = ?, box = ?, tubes = ?, chromosome = ?, sdate = ?, clone = ?, source = ?, location1 = ?, startpos = ?, endpos = ?,
		gene = ?, genelink = ?, dnaex = ?, validation = ?, pcr = ?, refs = ?, antibiotic = ? WHERE idbac = ?&quot;,
        (values_list[&#039;projects&#039;], values_list[&#039;comments&#039;], values_list[&#039;temperature&#039;], values_list[&#039;cell&#039;], values_list[&#039;box&#039;], values_list[&#039;tubes&#039;],
         values_list[&#039;chromo&#039;], values_list[&#039;date&#039;], values_list[&#039;clone&#039;], values_list[&#039;source&#039;], values_list[&#039;location&#039;], values_list[&#039;start&#039;], values_list[&#039;end&#039;],
         values_list[&#039;gene&#039;], values_list[&#039;genelink&#039;], values_list[&#039;dna&#039;], values_list[&#039;validation&#039;], values_list[&#039;pcr&#039;],
         values_list[&#039;refs&#039;], values_list[&#039;antibiotic&#039;], values_list[&#039;idbac&#039;]))

        database.commit()
        database.close()

    def delete_data(self, delete_string):
        &#039;&#039;&#039;deletes one field&#039;&#039;&#039;

        if sys.platform == &#039;darwin&#039;:
            (cursor, database) = link_db(self.db_path)
        else:
            (cursor, database) = link_db()
        cursor.execute(delete_string)

        database.commit()
        database.close()
</pre>
<p>In the next couple of posts we&#8217;ll dissect each function and see what&#8217;s going on. The class definition wasn&#8217;t changed, so we start with <code>get_data_generic</code></p>
<pre name="code" class="python">
def get_data_generic(self, range = 1, bac_to_get = 0):
	&#039;&#039;&#039;gets the data from the database&#039;&#039;&#039;       

	if sys.platform == &#039;darwin&#039;:
		(cursor, database) = link_db(self.db_path)
	else:
		(cursor, database) = link_db()

	if range == 1:
		cursor.execute(&quot;&quot;&quot;SELECT * FROM %s&quot;&quot;&quot; % self.table_name)
	elif range == 2:
		cursor.execute(&quot;&quot;&quot;SELECT * FROM %s where idbac = %d&quot;&quot;&quot; % (self.table_name, bac_to_get))

	table_data = cursor.fetchall()
	raw_data = []
	for i in table_data:
		raw_data.append(list(i))

	self.table_data = raw_data
	database.close()
</pre>
<p>The first difference we notice here is the <code>sys.platform</code> usage. This is required if we intend to package our application as an OS X app, using py2app. When a Python/wxPython application is packaged in OS X, the actual application executable is inside the a directory named after the application (or whatever you set up). In our case here we don&#8217;t provide a way for the Python script to receive the path and name for the database on a command line, as we expect it to be in the executable&#8217;s current directory. Because of that we need to provide a &#8220;config&#8221; file (in our case here a one-line text file with the database path) inside the application wrapper, something we will see in the end of the series.</p>
<p>Another modification here is the <code>range</code> parameter and the addition of the <code>bac_to_get</code> parameter. Notice that both parameters have a value assigned to it. This means that they are optional, the function&#8217;s call can pass them or not. If it doesn&#8217;t pass, their value will be the one assigned on the function declaration. So, here if we are interested in getting all bacs, <code>range</code> will have the value of 1 and we don&#8217;t need to worry about it. If we want an specific bac we will pass <code>range</code> as 2 and then pass the <code>bac_to_get</code> ID to be returned. </p>
<p>A final change/addition is that we added a new select statement for the cases when <code>range</code> equals 2. This time we are adding the bac ID to be returned.</p>
<p>Previously in the series:<br />
<a href="http://python.genedrift.org/2009/02/09/managing-a-simple-database-with-python-sqlite-and-wxpython-1/">Part 1</a><br />
<a href="http://python.genedrift.org/2009/02/17/managing-a-simple-database-with-python-sqlite-and-wxpython-2/">Part 2</a><br />
<a href="http://python.genedrift.org/2009/02/18/managing-a-simple-database-with-python-sqlite-and-wxpython-3/">Part 3</a><br />
<a href="http://python.genedrift.org/2009/03/02/managing-a-simple-database-with-python-sqlite-and-wxpython-4/">Part 4</a><br />
<a href="http://python.genedrift.org/2009/03/02/managing-a-simple-database-with-python-sqlite-and-wxpython-5/">Part 5</a></p>
<div class="zemanta-pixie"><a class="zemanta-pixie-a" href="http://reblog.zemanta.com/zemified/ea53b728-33c6-47db-aabf-0c695dcfabd8/" title="Zemified by Zemanta"><img class="zemanta-pixie-img" src="http://img.zemanta.com/reblog_a.png?x-id=ea53b728-33c6-47db-aabf-0c695dcfabd8" alt="Reblog this post [with Zemanta]" /></a><span class="zem-script more-related"></span></div>
<div class="feedflare">
<a href="http://feeds2.feedburner.com/~ff/BeginningPythonForBioinformatics?a=SteRPKO_Rec:_-yakNEoXxo:yIl2AUoC8zA"><img src="http://feeds2.feedburner.com/~ff/BeginningPythonForBioinformatics?d=yIl2AUoC8zA" border="0" /></a> <a href="http://feeds2.feedburner.com/~ff/BeginningPythonForBioinformatics?a=SteRPKO_Rec:_-yakNEoXxo:F7zBnMyn0Lo"><img src="http://feeds2.feedburner.com/~ff/BeginningPythonForBioinformatics?i=SteRPKO_Rec:_-yakNEoXxo:F7zBnMyn0Lo" border="0" /></a> <a href="http://feeds2.feedburner.com/~ff/BeginningPythonForBioinformatics?a=SteRPKO_Rec:_-yakNEoXxo:7Q72WNTAKBA"><img src="http://feeds2.feedburner.com/~ff/BeginningPythonForBioinformatics?d=7Q72WNTAKBA" border="0" /></a> <a href="http://feeds2.feedburner.com/~ff/BeginningPythonForBioinformatics?a=SteRPKO_Rec:_-yakNEoXxo:qj6IDK7rITs"><img src="http://feeds2.feedburner.com/~ff/BeginningPythonForBioinformatics?d=qj6IDK7rITs" border="0" /></a>
</div><img src="http://feeds2.feedburner.com/~r/BeginningPythonForBioinformatics/~4/SteRPKO_Rec" height="1" width="1" />";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T17:06:08+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:14;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:102:"http://feedproxy.google.com/~r/CoderWhoSaysPy/~3/djIyKRcH1TM/why-python-is-switching-to-mercurial.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:50:"Brett Cannon: Why Python is switching to Mercurial";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:102:"http://feedproxy.google.com/~r/CoderWhoSaysPy/~3/djIyKRcH1TM/why-python-is-switching-to-mercurial.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:6378:"Starting at PyCon 2008 thanks to Barry Warsaw and the Bazaar team I started thinking about moving Python over to a distributed version control system (DVCS). While I wanted to get offline commits for the benefit of non-core developers along with easier merging from 2.6 to 3.0 (ah, the days when there are only three branches under development), I knew that would not necessarily be enough of a reason for others to switch.<br /><br />Come October I started a PEP for switching off of svn to a DVCS. Originally it was going to be hg vs. bzr, but enough of an outcry on python-dev led to me to relent to adding git to the PEP. With the list of DVCSs decided I began writing up common use cases that I and other developers have come up against in developing Python. I then had a representative for each DVCS fill in the PEP with the best solution to the use case (who I am grateful to for helping). This all became <a href="http://www.python.org/dev/peps/pep-0374/">PEP 374</a>.<br /><br />And for me that's when the stress began. I was being bombarded on all sides on this pretty regularly. I quickly realized that choosing a DVCS was like choosing a code editor; it's a very personal thing for a lot of people. Plus I forget how big Python is now; when what I was doing hit the Net I ended up talking with developers from all three DVCSs which I didn't expect.<br /><br />Time past and I tried to absorb all three DVCSs as much as I could, although with my internship and trying to finish importlib for 3.1 I only had so much time. I ran a survey of the core developers where I asked them to rate the three DVCSs as either better, equal, or worse than svn if they felt they had enough experience to have an opinion.<br /><br />Based on the results of that survey where git was clearly the most disliked tool of the core developers, having the weakest Windows support, and not being implemented in Python, I decided to eliminate git from the running and announce its elimination at the first lightning talk at PyCon.<br /><br />When I arrived at PyCon pretty much everyone asked me about the DVCS PEP. People wanted to know how it was going, who was going to win, and giving me support/pity for what I was going through. Guido noticed this and decided to end my misery by saying he wanted to make a decision by the end of PyCon. I said I was fine with that as one was already about to be eliminated and I knew my personal preference at that exact moment aligned with Guido's.<br /><br />So I did my lightning talk eliminating git. Luckily that went well with only about two people telling me directly they disliked the decision.<br /><br />But the more telling thing was what everyone else told me after that lightning talk. I ended up with a surprisingly large number of people telling me -- including core developers -- they wanted, preferred, or guessed that hg would now win. Now the guesses could be explained away by Guido having publicly stated he likes hg, but to me the amount of people telling me they wanted hg to be chosen was surprisingly large. And honestly no one told me they preferred bzr (although no one said I better choose hg over bzr either).<br /><br />So Monday morning came around and I walked into the sprint. I asked Guido if he was ready to make a decision. He said yes, we both said hg, and so Guido <a href="http://twitter.com/gvanrossum/status/1418085336">tweeted the decision</a> before <a href="http://mail.python.org/pipermail/python-dev/2009-March/087931.html">telling python-dev</a> that we chose Mercurial.<br /><br />There has been a lot of speculation as to why Guido pronounced the way he did. On Twitter Guido said to read PEP 374 for the reasons. Since I helped write my PEP my reasons are reflected in the PEP.<br /><br />Obviously community preference as shown at PyCon played a role. No one wants to choose a DVCS that causes the community to not want to contribute to Python. And I would never choose a VCS that would cause Guido to not want to work on Python. Some people seem surprised that something non-technical played a role, but ignoring social issues is to ignore how much open source is a social phenomenon. And we are not the first project to take social preference into consideration: I know both GNOME and Pinax chose git because their developers preferred git.<br /><br />And there are technical reasons. Having hg being faster than bzr by 2x to 3x does matter to some extent. No one wants to cause someone to not contribute because they didn't want to wait for a checkout. And having personally experienced long checkout times because of a subpar connection to a specific server I know this can occur. The performance margin between hg and bzr is within reason typically and is not a flat-out deal-breaker, but it doesn't help either.<br /><br />Bazaar also has its short timespan of format stability working against it. The tool has changed its format at least three times based on what the man page says (1.0, 1.6, and 1.9). Mercurial, on the other hand, has been stable since I think it went public or near that time. They take great pride in the fact they have not changed it. And that stability more aligns with python-dev's sensibilities regarding stability.<br /><br /><a href="https://lists.ubuntu.com/archives/bazaar/2009q1/055872.html">Stephen Turnbull's explanation</a> of why on the bzr mailing list is also a good explanation of why we chose hg. Basically no one is saying bzr is bad, just that hg is a better fit for our needs on python-dev.<br /><br />But the thing I really love about having made this decision -- other than I don't have to stress about this anymore -- is that everyone seems to be flat-out happy we made a decision to switch as well. Once again the Python community stands out as being friendly and understanding about stuff like this with no one really seeming to be upset that we made the decision we did.<br /><br />As for when the switch will happen, I don't know. We are hoping by summer, but that is just a hope at the moment. We have to figure out the best way to convert our history as well as what workflow we want to have.<div class="blogger-post-footer"><img width="1" height="1" src="http://res1.blogblog.com/tracker/20144447-2653508241950466912?l=sayspy.blogspot.com" /></div><img src="http://feeds2.feedburner.com/~r/CoderWhoSaysPy/~4/djIyKRcH1TM" height="1" width="1" />";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T15:10:04+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:15;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:77:"http://radix.twistedmatrix.com/2009/03/games-with-non-expository-stories.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:86:"Tales of a Programming Hobo - Christopher Armstrong: Games with non-expository stories";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:77:"http://radix.twistedmatrix.com/2009/03/games-with-non-expository-stories.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:5652:"At the end of this blog post you'll find a list of games by three different developers. I think you should try them out.<br /><br />Vignettes? Well, that's how one of these developers describes his works. Some of them definitely aren't short (Don't Look Back took me about half an hour; Eversion took a few hours spread over a few days), but the stories they present all have in common a reflective simplicity. All of these games are more about story than gameplay: some of them have gameplay elements which try to give the player some direct, deeply effective control of the fiction (Daniel Benmergui's games), and others take tried-and-true gameplay mechanics and use them as a way to communicate story elements to the player (Don't Look Back and Eversion).<br /><br />The title of this post calls them "non-expository", and I'm not sure how accurate a phrase that is, but it's the first one that came to mind when trying to describe the way they present the story. Let's take a look:<br /><pre><blockquote> 1. The act of exposing or laying open; a setting out or<br />displaying to public view.<br />[1913 Webster]</blockquote></pre>It may be overly subtle or perhaps even punny, but I think it does make sense to refer to them as non-expository. The stories they present are not clear-cut and laid out. The author did not tell us what the story is: he showed us some scenes, depicted some characters, but didn't flesh out their details. They're much more introspective than that. When you get to the end (or one of the endings), you think to yourself: "okay, <em>maybe</em> I know what just happened. Whatever it was, it was cool."<br /><br />I can only say that I am really happy that indie game development is becoming so widespread and successful. Certainly most indie development these days is focused on improving the essential gameplay of video games, which is awesome, but I find the experiments with story much more fascinating.<br /><br />There's a more concrete property that most of these games share: there's no text or dialogue. Despite this, they instill in the player a strong sense of the narrative with subtle graphical, audial, and gameplay cues. Somewhat tangentially, there is something that I've become a bit obsessed with as I think more and more about story and games -- the way that we can communicate to the player by taking something which is commonly used as a utilitarian device of user interface (a score counter or a health meter, for example) and twisting it in some way to reinforce the impact of an event in the game's story. Eversion does this well. I'd like to write about this more, once I find a better list of examples.<br /><br />The one game in the list below which does have dialogue is Pathways, and its dialogue is very limited. Each character only says one or two very simple sentences. Even so, that dialogue really has an effect on me, and I wonder if that has something to do with the nostalgia I have for those old, badly-translated Japanese video games where most of the characters you run into simply repeat the same line over and over again. I wonder if someone who's not familiar with those types of games could have the same kind of emotional response to the simple but incisively crafted dialogue in Pathways.<br /><br />Anyway, here's the list. Most of these are Flash games and the links will take you directly to the page where you can play them, unless otherwise noted.<br /><br /><br /><span>Daniel Benmergui</span><br /><ul><li> <a href="http://www.kongregate.com/games/danielben/i-wish-i-were-the-moon">I wish I were the Moon</a>. Take pictures of the things you see on the screen, and then click again to move them elsewhere. See what happens.</li><li><a href="http://www.kongregate.com/games/danielben/storyteller">StoryTeller</a> is similar in that you basically have the ability to move elements of a scene around, but this time it's broken into three distinct scenes, representing three points in the lives of three characters. You can modify the elements in any of the scenes and immediately see how it affects the later ones.<br /></li></ul><br /><span>Terry Cavanagh</span><br /><ul><li><a href="http://www.kongregate.com/games/TerryCavanagh/dont-look-back">Don't Look Back</a>. It's a pretty simple jump-and-run game with beautiful music and a haunting turning point.</li><li><a href="http://distractionware.com/blog/?p=650">Pathways</a> (unfortunately, Windows-only and it doesn't seem to run well on Wine). Given some glitches on Wine, I haven't been able to play this game to completion, but what I've seen of it is really fascinating. It's all about making decisions, and it reinforces what seems to be a recurring theme in his works by not allowing the player's character to turn back. He can only move forward or turn onto another path.<br /></li></ul><br /><span>Guilherme S. Töws</span> (of Zaratustra Productions)<br /><ul><li><a href="http://zarat.us/tra/offline-games/eversion.html">Eversion</a> (another Windows-only game, but this one works perfectly on Wine). Another jump-and-run game which looks like a typically boring and hyper-cheery Mario-type game for the first couple of levels, but becomes gradually deeper and more bizarre. This one is the most difficult of all the games I've listed to actually complete, but you can get through the first 7 levels without having to collect all the gems. Getting them all may require the use of walkthroughs, which are readily available on Youtube.</li></ul><div class="blogger-post-footer"><img width="1" height="1" src="http://res1.blogblog.com/tracker/18669215-9015107625547366808?l=radix.twistedmatrix.com" /></div>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T15:07:20+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:16;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:39:"http://www.microshare.net/weblog/?p=101";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:35:"Uwe Feldtmann: The conficker virus.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:39:"http://www.microshare.net/weblog/?p=101";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:343:"It remains to be seen if the conficker virus turns out to be an April fools day joke or is a real virus and therefore a real threat. 
According to Sky News &#8220;the virus is undetectable&#8221;, &#8220;will steal your identity&#8221; and that both &#8220;Microsoft and Symantec have updated their virus checkers&#8221;.  
If this virus [...]";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T11:15:25+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:17;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:72:"http://www.protocolostomy.com/2009/03/30/activity-lapse-i-blame-twitter/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:44:"Brian Jones: Activity Lapse: I blame Twitter";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:72:"http://www.protocolostomy.com/2009/03/30/activity-lapse-i-blame-twitter/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:613:"<p>To all my geek/nerd friends in the blogosphere: I&#8217;ll be posting updates on Fedora Directory Server, my <a href="http://owladvisors.com">Linux training courses</a>, and more in the coming weeks, but I wanted to let you know that I&#8217;ve recently been stricken with&#8230; umm&#8230; Twitter. I&#8217;m <a href="http://twitter.com/bkjones">@bkjones</a> on twitter, so if you&#8217;re into beer, brewing, billiards, cooking, guitar/music, linux, system administration, perl, shell, python, php, databases, sql, or anything like that, lemme know, or <a href="http://twitter.com/bkjones">follow me</a>!</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T01:35:11+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:18;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:94:"http://feedproxy.google.com/~r/SeanMcGrath/~3/_0UHdzrtNjw/loose-coupling-of-temporal-kind.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:49:"Sean McGrath: Loose coupling of the temporal kind";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:94:"http://feedproxy.google.com/~r/SeanMcGrath/~3/_0UHdzrtNjw/loose-coupling-of-temporal-kind.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:312:"A short screencast explaining my views on <a href="http://www.itworld.com/video?bcpid=1578108607&bclid=1588003312&bctid=17388922001">Loose Coupling</a><div class="blogger-post-footer"><img width="1" height="1" src="http://res1.blogblog.com/tracker/3776799-5706631961098087017?l=seanmcgrath.blogspot.com" /></div>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-31T01:18:00+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:19;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:91:"http://blog.vrplumber.com/index.php?/archives/2300-RunSnakeRun-Python-Profiler-2.0.0b4.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:53:"Mike C. Fletcher: RunSnakeRun Python Profiler 2.0.0b4";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:91:"http://blog.vrplumber.com/index.php?/archives/2300-RunSnakeRun-Python-Profiler-2.0.0b4.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:439:"I've just released version 2.0.0b4 of the <a href="http://www.vrplumber.com/programming/runsnakerun/">RunSnakeRun</a> profile-viewer module I mentioned in my <a href="http://us.pycon.org/2009/conference/schedule/event/15/">PyCon presentation</a> on profiling.  This version runs reasonably well on Win32 platforms (as well as Linux, of course) and has tooltips for the SquareMap and text where there's sufficient room to display it.<br />";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-30T22:50:14+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:20;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:38:"http://thomas.apestaart.org/log/?p=815";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:45:"Thomas Vander Stichele: git workflow question";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://thomas.apestaart.org/log/?p=815";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:1665:"<p>I&#8217;m trying to integrate git into my workflow.  I&#8217;ve been reading documentation and tutorials (there sure are a lot), but I&#8217;m not sure they cover the use case I want to try and implement.  So I&#8217;m explaining it here in the hopes that some experienced gits will be able to show me the way.</p>
<p>The basic use case is simple: I want to hack on GStreamer, which uses git, from various computers (laptop, work machine, home machine), and have my private and/or public hacking in sync between those three machines.</p>
<p>Basically, when I create a branch on my laptop, hack in it, commit stuff, and push it out to my private or public repo, I then want to pull all those changes on my home desktop and continue hacking.</p>
<p>It looks like I should be able to do it with a magic combination of a bare repository on some server, and the right incantation of git remote add lines on all of my machines.  But so far, my experiments have only led me to some abomination of a bare repository where my home machine sees a branch created on my laptop with the name &#8216;thomas&#8217; as a branch named &#8216;private/thomas&#8217;.  In other words, the names don&#8217;t match up.  And for now it looks like the content doesn&#8217;t match up either; I somehow merged the thomas branch into my master on my home desktop.  Also, it looks like pulls from that private bare repo end up as an actual commit, which seems a bit messy.</p>
<p>I&#8217;ll retry my experiment to see if I might have screwed something up, but in the meantime, if you recognize the use case I&#8217;m going for and know how to implement it, feel free to throw me a bone.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-30T21:34:25+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:21;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:93:"http://feedproxy.google.com/~r/ForSomeValueOfMagic/~3/h9ZBtvCCnEA/pycon-proves-its-worth.html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:36:"Steve Holden: PyCon Proves Its Worth";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:93:"http://feedproxy.google.com/~r/ForSomeValueOfMagic/~3/h9ZBtvCCnEA/pycon-proves-its-worth.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:2048:"Here's a great quote from Catherine Devlin's blog post <a href="http://catherinedevlin.blogspot.com/2009/03/five-minutes-at-pycon-change-everything.html"><span>Five Minutes at PyCon Changes Everything</span></a> reporting the unexpected recruitment of a high-powered development team after giving a lightning talk:<br /><blockquote>If I'd had $1 million of startup funding to hire a staff to work on sqlpython, I couldn't have gotten a team that large or that talented. I figure that gives me better than a 1000-to-1 return on my PyCon investment. :)</blockquote>It's also been extremely gratifying to discover that the dip in numbers (initial assessment says we were maybe 10% down on 2009) represents an amazing result. Apparently many conferences have seen attendance at 50% of last year's numbers, and some have simply canceled because the cancellation fees were a smaller that their expected loss.<br /><br />This really vindicates the low-cost community-based approach that PyCon has always used. Several people told me that they booked to attend the conference without knowing whether they could get company approval, because they knew the conference was great value and they could afford to attend on their own dime. PyCon is a very special conference indeed, and the Python community makes remarkable things happen there every year.<div class="blogger-post-footer"><img width="1" height="1" src="http://res1.blogblog.com/tracker/496482-5577207541982108299?l=holdenweb.blogspot.com" /></div><div class="feedflare">
<a href="http://feeds2.feedburner.com/~ff/ForSomeValueOfMagic?a=h9ZBtvCCnEA:G_EOel0uoY0:yIl2AUoC8zA"><img src="http://feeds2.feedburner.com/~ff/ForSomeValueOfMagic?d=yIl2AUoC8zA" border="0" /></a> <a href="http://feeds2.feedburner.com/~ff/ForSomeValueOfMagic?a=h9ZBtvCCnEA:G_EOel0uoY0:Jy2wSXVWK38"><img src="http://feeds2.feedburner.com/~ff/ForSomeValueOfMagic?i=h9ZBtvCCnEA:G_EOel0uoY0:Jy2wSXVWK38" border="0" /></a>
</div><img src="http://feeds2.feedburner.com/~r/ForSomeValueOfMagic/~4/h9ZBtvCCnEA" height="1" width="1" />";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-30T22:00:11+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:22;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:60:"http://farmdev.com/thoughts/76/the-python-packaging-problem/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:44:"Kumar McMillan: The Python Packaging Problem";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:60:"http://farmdev.com/thoughts/76/the-python-packaging-problem/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:498:"<p>At <a class="reference" href="http://us.pycon.org/2009/">PyCon 2009</a> the fact that Python needs to solve the &quot;packaging problem&quot; came up a few times.  This is not a new discussion.  However, the problem is still not completely solved so here I'll point out the details of the problem, the unsolved parts, the solved parts, and how the solved parts could be solved better ...</p>
<p>[<a href="http://farmdev.com/thoughts/76/the-python-packaging-problem/">read entire article</a>]</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-30T19:51:25+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:23;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:81:"http://www.willmcgugan.com/blog/tech/2009/3/30/misleading-importerrors-in-django/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:47:"Will McGugan: Misleading ImportErrors in Django";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:81:"http://www.willmcgugan.com/blog/tech/2009/3/30/misleading-importerrors-in-django/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:3549:"<p>I was debugging an issue with our Django app at work today; an <code>admin.py</code> file wasn't being picked up, and nothing was appearing in the admin pages. It turned that an <code>ImportError</code> was being thrown in the <code>admin.py</code> and Django was interpreting this as the file not existing.</p>
<p>I'm assuming that the reason for this is that Django uses <code>__import__</code> to import the module, and catches <code>ImportError</code>'s if the <code>admin.py</code> doesn't exist. The trouble with this is that if <code>admin.py</code> <em>does</em> exist, and throws an <code>ImportError</code> of its own, Django will also interpret that as a missing <code>admin.py</code> &ndash; which can be misleading.</p>
<p>The only solution I can think of to more accurately handle this would be to programmaticaly examine the traceback to determine where the ImportError is thrown. If the traceback is one level deep, we know that the <code>ImportError</code> was thrown because the module doesn't exists. If it is <em>greater</em> than one level then we know the module was found, but has thrown an <code>ImportError</code> of its own.</p>
<p>Here's a simple proof of concept:</p>



<div class="code"><pre><span class="c">#check_import.py</span>
<span class="kn">import</span> <span class="nn">traceback</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">check_import</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nb">__import__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
        <span class="n">exceptionType</span><span class="p">,</span> <span class="n">exceptionValue</span><span class="p">,</span> <span class="n">exceptionTraceback</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">traceback</span><span class="o">.</span><span class="n">extract_tb</span><span class="p">(</span><span class="n">exceptionTraceback</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mf">1</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="k">print</span> <span class="n">check_import</span><span class="p">(</span><span class="s">&quot;os&quot;</span><span class="p">)</span>
<span class="k">print</span> <span class="n">check_import</span><span class="p">(</span><span class="s">&quot;noimport&quot;</span><span class="p">)</span>
<span class="k">print</span> <span class="n">check_import</span><span class="p">(</span><span class="s">&quot;anotherlevel&quot;</span><span class="p">)</span>
</pre></div>




<div class="code"><pre><span class="c">#anotherlevel.py</span>
<span class="kn">import</span> <span class="nn">thismoduledoesnotexist</span>
</pre></div>

<p>This produces the following when run:</p>



<div class="code"><pre>True<br />False<br />True</pre></div>

<p>It would be nice if Django did something similar for its implicit imports. I think the best behaviour would be re-raise the ImportError if it the module does actually exist. That way, it is clear what the problem is. I may attempt to write a patch at some point, unless someone knows of a better solution.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-30T18:33:35+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:24;a:6:{s:4:"data";s:9:"
	
	
	
	
";s:7:"attribs";a:1:{s:43:"http://www.w3.org/1999/02/22-rdf-syntax-ns#";a:1:{s:5:"about";s:39:"http://www.swordstyle.com/blog2/?p=1763";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:24:"http://purl.org/rss/1.0/";a:2:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:41:"Terry Peppers: PyCon Moment of ‘Doh!’";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:39:"http://www.swordstyle.com/blog2/?p=1763";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:269:"<p>Me: I know what you were trying to do last night @ the TiP Open Space, Titus. Trying to get younger blood to take charge of the testing flag. </p>
<p>Titus: You&#8217;re younger than me?</p>
<p>Me: I&#8217;m 34. </p>
<p>Titus: I&#8217;m 33. </p>
<p>Me: Ah fuck.
</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:4:"date";a:1:{i:0;a:5:{s:4:"data";s:25:"2009-03-30T16:30:04+00:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}s:7:"headers";a:7:{s:4:"date";s:29:"Wed, 01 Apr 2009 14:07:41 GMT";s:6:"server";s:92:"Apache/2.2.9 (Debian) DAV/2 SVN/1.5.1 mod_ssl/2.2.9 OpenSSL/0.9.8g mod_wsgi/2.3 Python/2.5.2";s:13:"last-modified";s:29:"Wed, 01 Apr 2009 11:43:50 GMT";s:4:"etag";s:27:"15e0206-13d94-4667cd4434980";s:13:"accept-ranges";s:5:"bytes";s:14:"content-length";s:5:"81300";s:12:"content-type";s:15:"application/xml";}s:5:"build";d:20070719221955;}